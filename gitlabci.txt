stages:
    - test
    - build
    - deploy

variables:
    MARIADB_DATABASE: db
    MARIADB_USER: $DB_USER
    MARIADB_PASSWORD: $PASSWORD
    MARIADB_ROOT_PASSWORD: $ROOT_PASSWORD
    MARIADB_HOST: mariadb
    MARIADB_PORT: 3306
    SERVEUR: $DEPLOY_SRV
    FOLDER: $PROJECT_FOLDER
    USER: $SRV_USER
    APPLICATION: $APP
    

build app:
    image: python:3
    stage: test
    services:
        - name: mariadb
    script:
        - apt update -y && apt install -y curl
        - |
          if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
            export DATABASE=mariadb
            apt-get install -y default-mysql-client
            echo "GRANT ALL on *.* to '${MARIADB_USER}';"| mysql -u root --password="${MARIADB_ROOT_PASSWORD}" -h mariadb
          else
            export DATABASE=sqlite3
          fi
        - python -m pip install -r requirements.txt
        - python manage.py migrate
        - python3 manage.py test presentation
        - python manage.py runserver 0.0.0.0:8000 &
        - sleep 10
        - curl http://127.0.0.1:8000/presentation/ |grep "Awesome"

lint-job:
    image: registry.gitlab.com/pipeline-components/flake8:latest
    stage: .pre
    script:
        - flake8 .
    
build image:
    image: docker:latest
    stage: build
    services:
        - docker:dind
    before_script:
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    script:
        - |
          if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
            tag=""
            echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
          else
            tag=":$CI_COMMIT_REF_SLUG"
            echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
          fi
        - docker build --pull -t "$CI_REGISTRY_IMAGE"/django"${tag}" .
        - docker push "$CI_REGISTRY_IMAGE"/django"${tag}"
        - cd nginx
        - docker build --pull -t "$CI_REGISTRY_IMAGE"/nginx"${tag}" .
        - docker push "$CI_REGISTRY_IMAGE"/nginx"${tag}"
        
    rules:
        - if: $CI_COMMIT_BRANCH
          exists: 
              - Dockerfile

deploy app:
    stage: deploy
    before_script:
        - apt-get update -qq
        - apt-get install -qq git curl
        - 'which ssh-agent || ( apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - ssh "$USER"@"$SERVEUR" "cd '${FOLDER}' && git pull origin master && docker compose -f docker-compose-master.yml up -d  && exit"
        - curl http://"$SERVEUR"/"$APPLICATION |grep "Bienvenue"



